{"version":3,"sources":["enums/gameState.ts","enums/tileType.ts","constants/theme.ts","constants/neighbourPositionOffsets.ts","components/Tile.tsx","components/Board.tsx","components/App.tsx","index.tsx"],"names":["GameState","TileType","THEME","Object","freeze","background","tileBorder","NEIGHBOUR_POSITION_OFFSETS","Tile","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","onRightMouseButtonClick","event","preventDefault","props","flagTile","rowIndex","columnIndex","inherits","createClass","key","value","_this2","tileStyles","styles","tile","type","exposed","hasBomb","push","uncoveredTile","body","unmarked","flagged","react_default","a","createElement","src","alt","className","css","icon","adjacentBombs","onContextMenu","onClick","onTileClick","Component","StyleSheet","create","position","height","width","left","top","border-left","border-top",":last-child","border-right","text-align","line-height","font-family","Board","initialBombsCount","rowCount","columnCount","restartGame","setState","gameState","unstarted","board","getEmptyBoard","state","getFilledBoard","started","uncoverTiles","gameOver","newBoard","toConsumableArray","newTileType","objectSpread","every","row","clickedRowIndex","clickedColumnIndex","undefined","possiblePositionsToExpose","Set","checkedPositions","boardCopy","add","forEach","offset","neighbourRowIndex","neighbourColumnIndex","_loop","tileCoords","split","map","Number","neighbourPosition","has","delete","size","checkForWin","Popup","alert","_unused","failed","rows","columns","_this3","_","Tile_Tile","unplacedBombsLeft","nextColumnIndex","Math","ceil","random","nextRowIndex","isNewTileSameAsClickedTile","newField","updateAdjacentBombsCount","boardWrapper","restartGameButton","display","flexDirection","alignItems","margin-bottom","color",":last-child > *","border-bottom","App","dist_default","Board_Board","align-items","justify-content","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.e55461c7.chunk.js","sourcesContent":["export enum GameState {\n  unstarted = \"unstarted\",\n  started = \"started\",\n  succedeed = \"succedeed\",\n  failed = \"failed\"\n}\n","export enum TileType {\n  flagged = \"flagged\",\n  exposed = \"exposed\",\n  unmarked = \"unmarked\"\n}\n","export const THEME = Object.freeze({\n  background: \"rgb(50, 50, 80)\",\n  tileBorder: \"#A800E0\"\n});\n","export const NEIGHBOUR_POSITION_OFFSETS = Object.freeze([\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, -1],\n  [0, 1],\n  [1, -1],\n  [1, 0],\n  [1, 1]\n]);\n","import { css, StyleSheet } from \"aphrodite\";\nimport React, { Component } from \"react\";\nimport { THEME } from \"../constants/theme\";\nimport { TileType } from \"../enums/tileType\";\n\nexport type TileProps = {\n  type: TileType;\n  hasBomb: boolean;\n  adjacentBombs?: number;\n  rowIndex: number;\n  columnIndex: number;\n\n  // Callbacks:\n  flagTile: any;\n  onTileClick: any;\n};\nexport class Tile extends Component<TileProps> {\n  onRightMouseButtonClick = (event: any) => {\n    event.preventDefault();\n    this.props.flagTile(this.props.rowIndex, this.props.columnIndex);\n  };\n\n  render() {\n    let tileStyles = [styles.tile];\n    if (this.props.type === TileType.exposed && !this.props.hasBomb) {\n      tileStyles.push(styles.uncoveredTile);\n    }\n\n    let body: any = \"\";\n    if (this.props.type === TileType.unmarked) {\n      body = \"\";\n    } else if (this.props.type === TileType.flagged) {\n      body = <img src=\"assets/flag.svg\" alt=\"\" className={css(styles.icon)} />;\n    } else if (this.props.type === TileType.exposed) {\n      body = this.props.adjacentBombs || \"\";\n      if (this.props.hasBomb) {\n        body = (\n          <img src=\"assets/mine.png\" alt=\"\" className={css(styles.icon)} />\n        );\n      }\n    }\n\n    return (\n      <div\n        className={css(tileStyles)}\n        onContextMenu={this.onRightMouseButtonClick}\n        onClick={() =>\n          this.props.onTileClick(this.props.rowIndex, this.props.columnIndex)\n        }\n      >\n        {body}\n      </div>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    position: \"absolute\",\n    height: \"100%\",\n    width: \"100%\",\n    left: 0,\n    top: 0\n  },\n\n  tile: {\n    position: \"relative\",\n    \"border-left\": `1px solid ${THEME.tileBorder}`,\n    \"border-top\": `1px solid ${THEME.tileBorder}`,\n    height: \"20px\",\n    width: \"20px\",\n    \":last-child\": {\n      \"border-right\": `1px solid ${THEME.tileBorder}`\n    },\n    \"text-align\": \"center\",\n    \"line-height\": \"20px\",\n    \"font-family\": \"impact\",\n    background: \"rgb(128, 128, 128)\"\n  },\n\n  uncoveredTile: {\n    background: `rgb(192, 192, 192)`\n  }\n});\n","import { css, StyleSheet } from \"aphrodite\";\nimport React, { Component } from \"react\";\nimport Popup from \"react-popup\";\nimport { NEIGHBOUR_POSITION_OFFSETS } from \"../constants/neighbourPositionOffsets\";\nimport { THEME } from \"../constants/theme\";\nimport { GameState } from \"../enums/gameState\";\nimport { TileType } from \"../enums/tileType\";\nimport { Tile } from \"./Tile\";\n\ntype BoardState = {\n  gameState: GameState;\n  board: any[][];\n};\n\nexport class Board extends Component<any, BoardState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      gameState: GameState.unstarted,\n      board: this.getEmptyBoard(this.rowCount, this.columnCount)\n    };\n  }\n\n  private readonly initialBombsCount = 99;\n  private readonly rowCount = 20;\n  private readonly columnCount = 24;\n\n  // private readonly initialBombsCount = 20;\n  // private readonly rowCount = 10;\n  // private readonly columnCount = 12;\n\n  // private readonly initialBombsCount = 4;\n  // private readonly rowCount = 6;\n  // private readonly columnCount = 6;\n\n  restartGame = () => {\n    this.setState({\n      gameState: GameState.unstarted,\n      board: this.getEmptyBoard(this.rowCount, this.columnCount)\n    });\n  };\n\n  onTileClick = (rowIndex: number, columnIndex: number) => {\n    if (this.state.gameState === GameState.unstarted) {\n      let board = this.getFilledBoard(rowIndex, columnIndex);\n      this.setState({ gameState: GameState.started });\n      this.uncoverTiles(rowIndex, columnIndex, board);\n    } else if (this.state.gameState === GameState.started) {\n      if (this.state.board[rowIndex][columnIndex].props.hasBomb) {\n        this.gameOver();\n      } else {\n        this.uncoverTiles(rowIndex, columnIndex);\n      }\n    }\n  };\n\n  checkForWin(board: any[][]) {\n    return board.every(row =>\n      row.every(\n        tile => tile.props.type === TileType.exposed || tile.props.hasBomb\n      )\n    );\n  }\n\n  uncoverTiles(\n    clickedRowIndex: number,\n    clickedColumnIndex: number,\n    board: any[][] = this.state.board\n  ) {\n    const possiblePositionsToExpose = new Set<string>();\n    const checkedPositions = new Set<string>();\n    let boardCopy = [...board];\n\n    possiblePositionsToExpose.add(clickedRowIndex + \";\" + clickedColumnIndex);\n\n    let tile = boardCopy[clickedRowIndex][clickedColumnIndex];\n    if (!tile.props.hasBomb) {\n      boardCopy[clickedRowIndex][clickedColumnIndex] = {\n        ...tile,\n        props: { ...tile.props, type: TileType.exposed }\n      };\n      if (!tile.props.adjacentBombs) {\n        NEIGHBOUR_POSITION_OFFSETS.forEach(offset => {\n          let neighbourRowIndex = clickedRowIndex + offset[0];\n          let neighbourColumnIndex = clickedColumnIndex + offset[1];\n          if (\n            neighbourRowIndex < this.rowCount &&\n            neighbourColumnIndex < this.columnCount &&\n            neighbourRowIndex >= 0 &&\n            neighbourColumnIndex >= 0\n          ) {\n            possiblePositionsToExpose.add(\n              neighbourRowIndex + \";\" + neighbourColumnIndex\n            );\n          }\n        });\n      }\n    }\n\n    while (possiblePositionsToExpose.size) {\n      let tileCoords = [...possiblePositionsToExpose][0].split(\";\").map(Number);\n      let tile = boardCopy[tileCoords[0]][tileCoords[1]];\n\n      // add neighbours to possiblePositionsToExpose if they weren't checked before\n      if (!tile.props.hasBomb && !tile.props.adjacentBombs) {\n        NEIGHBOUR_POSITION_OFFSETS.forEach(offset => {\n          let neighbourRowIndex = tileCoords[0] + offset[0];\n          let neighbourColumnIndex = tileCoords[1] + offset[1];\n          let neighbourPosition =\n            neighbourRowIndex + \";\" + neighbourColumnIndex;\n          if (\n            neighbourRowIndex < this.rowCount &&\n            neighbourColumnIndex < this.columnCount &&\n            neighbourRowIndex >= 0 &&\n            neighbourColumnIndex >= 0 &&\n            !checkedPositions.has(neighbourPosition)\n          ) {\n            possiblePositionsToExpose.add(neighbourPosition);\n          }\n        });\n      }\n\n      if (!tile.props.hasBomb) {\n        boardCopy[tileCoords[0]][tileCoords[1]] = {\n          ...tile,\n          props: { ...tile.props, type: TileType.exposed }\n        };\n      }\n\n      checkedPositions.add([...possiblePositionsToExpose][0]);\n      possiblePositionsToExpose.delete([...possiblePositionsToExpose][0]);\n    }\n\n    if (this.checkForWin(boardCopy)) {\n      boardCopy = boardCopy.map(row =>\n        row.map(tile => ({\n          ...tile,\n          props: {\n            ...tile.props,\n            type:\n              tile.props.type === TileType.flagged\n                ? TileType.flagged\n                : TileType.exposed\n          }\n        }))\n      );\n      Popup.alert(\"You won!\");\n    }\n    this.setState({\n      board: boardCopy\n    });\n  }\n\n  updateAdjacentBombsCount(board: any[][]) {\n    board = board.map((row, rowIndex) =>\n      row.map((tile, columnIndex) => {\n        let adjacentBombs = 0;\n\n        NEIGHBOUR_POSITION_OFFSETS.forEach(offset => {\n          try {\n            adjacentBombs +=\n              board[rowIndex + offset[0]][columnIndex + offset[1]].props\n                .hasBomb;\n          } catch {}\n        });\n\n        return { ...tile, props: { ...tile.props, adjacentBombs } };\n      })\n    );\n\n    return board;\n  }\n\n  gameOver() {\n    this.setState({\n      gameState: GameState.failed,\n      board: this.state.board.map(row =>\n        row.map(tile => {\n          if (tile.props.hasBomb) {\n            return {\n              ...tile,\n              props: { ...tile.props, type: TileType.exposed }\n            };\n          }\n          return tile;\n        })\n      )\n    });\n    Popup.alert(\"Game over!\");\n  }\n\n  flagTile = (rowIndex: number, columnIndex: number) => {\n    if (\n      this.state.gameState === GameState.started &&\n      this.state.board[rowIndex][columnIndex].props.type !== TileType.exposed\n    ) {\n      let newBoard = [...this.state.board];\n      let tile = newBoard[rowIndex][columnIndex];\n      let newTileType = TileType.flagged;\n      if (tile.props.type === TileType.flagged) {\n        newTileType = TileType.unmarked;\n      }\n\n      newBoard[rowIndex][columnIndex] = {\n        ...tile,\n        props: { ...tile.props, type: newTileType }\n      };\n\n      this.setState({\n        board: newBoard\n      });\n    }\n  };\n\n  getEmptyBoard(rows: number, columns: number) {\n    return [...Array(rows)]\n      .map(() => [...Array(columns)])\n      .map((row, rowIndex) =>\n        row.map((_, columnIndex) => (\n          <Tile\n            type={TileType.unmarked}\n            hasBomb={false}\n            adjacentBombs={0}\n            key={columnIndex}\n            flagTile={this.flagTile}\n            onTileClick={this.onTileClick}\n            rowIndex={rowIndex}\n            columnIndex={columnIndex}\n          />\n        ))\n      );\n  }\n\n  getFilledBoard(clickedRowIndex: number, clickedColumnIndex: number) {\n    let board: any[][] = this.getEmptyBoard(this.rowCount, this.columnCount);\n\n    let unplacedBombsLeft = this.initialBombsCount;\n\n    while (unplacedBombsLeft) {\n      let nextColumnIndex = Math.ceil(Math.random() * this.columnCount) - 1;\n      let nextRowIndex = Math.ceil(Math.random() * this.rowCount) - 1;\n      let isNewTileSameAsClickedTile =\n        nextColumnIndex === clickedColumnIndex &&\n        clickedRowIndex &&\n        nextRowIndex;\n      let newField = board[nextRowIndex][nextColumnIndex];\n      if (!newField.hasBomb && !isNewTileSameAsClickedTile) {\n        newField = {\n          ...newField,\n          props: {\n            ...newField.props,\n            hasBomb: true\n          }\n        };\n\n        board[nextRowIndex][nextColumnIndex] = newField;\n        unplacedBombsLeft--;\n      }\n    }\n\n    board = this.updateAdjacentBombsCount(board);\n\n    return board;\n  }\n\n  render() {\n    return (\n      <div className={css(styles.boardWrapper)}>\n        <button\n          className={css(styles.restartGameButton)}\n          onClick={this.restartGame}\n        >\n          Restart\n        </button>\n        <div>\n          {this.state.board.map((row, rowIndex) => {\n            return (\n              <div className={css(styles.row)} key={rowIndex}>\n                {row}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  boardWrapper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n\n  restartGameButton: {\n    \"margin-bottom\": \"20px\",\n    height: \"30px\",\n    width: \"60px\",\n    background: `red`,\n    color: \"white\",\n    \"font-family\": \"Impact\"\n  },\n\n  row: {\n    display: \"flex\",\n    \":last-child > *\": {\n      \"border-bottom\": `1px solid ${THEME.tileBorder}`\n    }\n  },\n\n  tile: {\n    \"border-left\": `1px solid ${THEME.tileBorder}`,\n    \"border-top\": `1px solid ${THEME.tileBorder}`,\n    height: \"20px\",\n    width: \"20px\",\n    \":last-child\": {\n      \"border-right\": `1px solid ${THEME.tileBorder}`\n    }\n  }\n});\n","import { css, StyleSheet } from \"aphrodite\";\nimport React, { Component } from \"react\";\nimport Popup from \"react-popup\";\nimport { THEME } from \"../constants/theme\";\nimport { Board } from \"./Board\";\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className={css(styles.App)}>\n        <Popup />,\n        <Board />\n      </div>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  App: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    \"align-items\": \"center\",\n    \"justify-content\": \"center\",\n    background: `${THEME.background}`\n  }\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport \"./index.css\";\nimport \"./styles/popup.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}