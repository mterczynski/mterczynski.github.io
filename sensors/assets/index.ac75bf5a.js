var R=Object.defineProperty;var O=(n,t,e)=>t in n?R(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var p=(n,t,e)=>(O(n,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))l(a);new MutationObserver(a=>{for(const i of a)if(i.type==="childList")for(const s of i.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&l(s)}).observe(document,{childList:!0,subtree:!0});function e(a){const i={};return a.integrity&&(i.integrity=a.integrity),a.referrerpolicy&&(i.referrerPolicy=a.referrerpolicy),a.crossorigin==="use-credentials"?i.credentials="include":a.crossorigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function l(a){if(a.ep)return;a.ep=!0;const i=e(a);fetch(a.href,i)}})();class m{constructor(t,e){this.x=t,this.y=e}distanceTo(t){const e=t.x-this.x,l=t.x-this.x;return Math.sqrt(e**2+l**2)}}class E{lineRect(t,e){const l=e.x,a=e.y,i=e.height,s=e.width,o=this.lineLine(t.a.x,t.a.y,t.b.x,t.b.y,l,a,l,a+i),r=this.lineLine(t.a.x,t.a.y,t.b.x,t.b.y,l+s,a,l+s,a+i),y=this.lineLine(t.a.x,t.a.y,t.b.x,t.b.y,l,a,l+s,a),f=this.lineLine(t.a.x,t.a.y,t.b.x,t.b.y,l,a+i,l+s,a+i);let x=new m(1/0,1/0);return[o,r,y,f].forEach(u=>{if(!!u.isCollision){if(!u.intersectionPoint)throw new Error("missing intersection point");u.intersectionPoint.distanceTo(t.a)<x.distanceTo(t.a)&&(x=u.intersectionPoint)}}),o.isCollision||r.isCollision||y.isCollision||f.isCollision?x:null}lineLine(t,e,l,a,i,s,o,r){const y=((o-i)*(e-s)-(r-s)*(t-i))/((r-s)*(l-t)-(o-i)*(a-e)),f=((l-t)*(e-s)-(a-e)*(t-i))/((r-s)*(l-t)-(o-i)*(a-e));if(y>=0&&y<=1&&f>=0&&f<=1){const x=t+y*(l-t),u=e+y*(a-e);return{isCollision:!0,intersectionPoint:new m(x,u)}}return{isCollision:!1}}rectCircle(t,e){const l=e.x-Math.max(t.x,Math.min(e.x,t.x+t.width)),a=e.y-Math.max(t.y,Math.min(e.y,t.y+t.height));return{isCollision:l*l+a*a<e.radius*e.radius}}}class H{constructor(t,e){this.a=t,this.b=e}getLength(){return this.a.distanceTo(this.b)}}const W={size:19,tiles:[{x:0,y:0,type:"wall"},{x:1,y:0,type:"wall"},{x:2,y:0,type:"wall"},{x:3,y:0,type:"wall"},{x:4,y:0,type:"wall"},{x:5,y:0,type:"wall"},{x:6,y:0,type:"wall"},{x:7,y:0,type:"wall"},{x:8,y:0,type:"wall"},{x:9,y:0,type:"wall"},{x:10,y:0,type:"wall"},{x:11,y:0,type:"wall"},{x:12,y:0,type:"wall"},{x:13,y:0,type:"wall"},{x:14,y:0,type:"wall"},{x:15,y:0,type:"wall"},{x:16,y:0,type:"wall"},{x:17,y:0,type:"wall"},{x:18,y:0,type:"wall"},{x:0,y:1,type:"wall"},{x:1,y:1,type:"wall"},{x:9,y:1,type:"wall"},{x:10,y:1,type:"wall"},{x:11,y:1,type:"wall"},{x:18,y:1,type:"wall"},{x:0,y:2,type:"wall"},{x:9,y:2,type:"wall"},{x:10,y:2,type:"wall"},{x:18,y:2,type:"wall"},{x:0,y:3,type:"wall"},{x:4,y:3,type:"wall"},{x:14,y:3,type:"wall"},{x:18,y:3,type:"wall"},{x:0,y:4,type:"wall"},{x:4,y:4,type:"wall"},{x:5,y:4,type:"wall"},{x:6,y:4,type:"wall"},{x:13,y:4,type:"wall"},{x:14,y:4,type:"wall"},{x:15,y:4,type:"wall"},{x:18,y:4,type:"wall"},{x:0,y:5,type:"wall"},{x:4,y:5,type:"wall"},{x:5,y:5,type:"wall"},{x:6,y:5,type:"wall"},{x:7,y:5,type:"wall"},{x:12,y:5,type:"wall"},{x:13,y:5,type:"wall"},{x:14,y:5,type:"wall"},{x:15,y:5,type:"wall"},{x:18,y:5,type:"wall"},{x:0,y:6,type:"wall"},{x:4,y:6,type:"wall"},{x:5,y:6,type:"wall"},{x:6,y:6,type:"wall"},{x:7,y:6,type:"wall"},{x:12,y:6,type:"wall"},{x:13,y:6,type:"wall"},{x:14,y:6,type:"wall"},{x:15,y:6,type:"wall"},{x:18,y:6,type:"wall"},{x:0,y:7,type:"wall"},{x:4,y:7,type:"wall"},{x:5,y:7,type:"wall"},{x:6,y:7,type:"wall"},{x:7,y:7,type:"wall"},{x:12,y:7,type:"wall"},{x:13,y:7,type:"wall"},{x:14,y:7,type:"wall"},{x:15,y:7,type:"wall"},{x:18,y:7,type:"wall"},{x:0,y:8,type:"wall"},{x:4,y:8,type:"wall"},{x:5,y:8,type:"wall"},{x:6,y:8,type:"wall"},{x:7,y:8,type:"wall"},{x:7,y:8,type:"wall"},{x:8,y:8,type:"wall"},{x:9,y:8,type:"wall"},{x:10,y:8,type:"wall"},{x:11,y:8,type:"wall"},{x:11,y:7,type:"wall"},{x:12,y:8,type:"wall"},{x:13,y:8,type:"wall"},{x:14,y:8,type:"wall"},{x:15,y:8,type:"wall"},{x:18,y:8,type:"wall"},{x:0,y:9,type:"wall"},{x:4,y:9,type:"wall"},{x:5,y:9,type:"wall"},{x:6,y:9,type:"wall"},{x:7,y:9,type:"wall"},{x:8,y:9,type:"wall"},{x:9,y:9,type:"wall"},{x:10,y:9,type:"wall"},{x:11,y:9,type:"wall"},{x:12,y:9,type:"wall"},{x:13,y:9,type:"wall"},{x:14,y:9,type:"wall"},{x:15,y:9,type:"wall"},{x:18,y:9,type:"wall"},{x:0,y:10,type:"wall"},{x:4,y:10,type:"wall"},{x:5,y:10,type:"wall"},{x:6,y:10,type:"wall"},{x:7,y:10,type:"wall"},{x:8,y:10,type:"wall"},{x:9,y:10,type:"wall"},{x:10,y:10,type:"wall"},{x:11,y:10,type:"wall"},{x:12,y:10,type:"wall"},{x:13,y:10,type:"wall"},{x:14,y:10,type:"wall"},{x:15,y:10,type:"wall"},{x:18,y:10,type:"wall"},{x:0,y:11,type:"wall"},{x:4,y:11,type:"wall"},{x:5,y:11,type:"wall"},{x:6,y:11,type:"wall"},{x:7,y:11,type:"wall"},{x:8,y:11,type:"wall"},{x:9,y:11,type:"wall"},{x:10,y:11,type:"wall"},{x:11,y:11,type:"wall"},{x:12,y:11,type:"wall"},{x:13,y:11,type:"wall"},{x:14,y:11,type:"wall"},{x:15,y:11,type:"wall"},{x:18,y:11,type:"wall"},{x:0,y:12,type:"wall"},{x:4,y:12,type:"wall"},{x:5,y:12,type:"wall"},{x:6,y:12,type:"wall"},{x:7,y:12,type:"wall"},{x:8,y:12,type:"wall"},{x:9,y:12,type:"wall"},{x:10,y:12,type:"wall"},{x:11,y:12,type:"wall"},{x:12,y:12,type:"wall"},{x:13,y:12,type:"wall"},{x:14,y:12,type:"wall"},{x:15,y:12,type:"wall"},{x:18,y:12,type:"wall"},{x:0,y:13,type:"wall"},{x:5,y:13,type:"wall"},{x:6,y:13,type:"wall"},{x:7,y:13,type:"wall"},{x:8,y:13,type:"wall"},{x:9,y:13,type:"wall"},{x:10,y:13,type:"wall"},{x:11,y:13,type:"wall"},{x:12,y:13,type:"wall"},{x:13,y:13,type:"wall"},{x:14,y:13,type:"wall"},{x:15,y:13,type:"wall"},{x:18,y:13,type:"wall"},{x:0,y:14,type:"wall"},{x:18,y:14,type:"wall"},{x:0,y:15,type:"wall"},{x:5,y:15,type:"wall"},{x:6,y:15,type:"wall"},{x:18,y:15,type:"wall"},{x:0,y:16,type:"wall"},{x:1,y:16,type:"wall"},{x:12,y:16,type:"wall"},{x:17,y:16,type:"wall"},{x:18,y:16,type:"wall"},{x:0,y:17,type:"wall"},{x:1,y:17,type:"wall"},{x:2,y:17,type:"wall"},{x:12,y:17,type:"wall"},{x:16,y:17,type:"wall"},{x:17,y:17,type:"wall"},{x:18,y:17,type:"wall"},{x:0,y:18,type:"wall"},{x:1,y:18,type:"wall"},{x:2,y:18,type:"wall"},{x:3,y:18,type:"wall"},{x:4,y:18,type:"wall"},{x:5,y:18,type:"wall"},{x:6,y:18,type:"wall"},{x:7,y:18,type:"wall"},{x:8,y:18,type:"wall"},{x:9,y:18,type:"wall"},{x:10,y:18,type:"wall"},{x:11,y:18,type:"wall"},{x:12,y:18,type:"wall"},{x:13,y:18,type:"wall"},{x:14,y:18,type:"wall"},{x:15,y:18,type:"wall"},{x:16,y:18,type:"wall"},{x:17,y:18,type:"wall"},{x:18,y:18,type:"wall"}]},T={x:3,y:8},D=5,G=1,q=(n,t)=>(t-n)**2,z=50,K=.3,V=.5,X=.01,Y=W,_=5,w=40,g={wall:"rgb(0, 160, 120)",sensorLine:"rgba(200, 0, 0, 0.3)",pointOfCollision:"rgba(255, 0, 0, 0.2)",canvasBackground:"rgb(240, 240, 240)",gridLine:"rgb(200, 200, 200)",bots:{normal:{aliveBot:"rgb(100, 100, 255)",deadBot:"rgb(100, 100, 100)"},anomaly:{aliveBot:"rgb(100, 190, 100)",deadBot:"rgb(50, 80, 50)"}}};function j(){return Math.random()-.5}class B{constructor(){p(this,"weights",Array(D).fill(0).map(()=>j()))}clone(){const t=new B;return t.weights=[...this.weights],t}evaluate(t){if(t.length!==D)throw new Error(`Expected ${D} numerical inputs`);return t.reduce((l,a,i)=>l+a*this.weights[i],0)}}const M=.004;var C=(n=>(n[n.left=-M]="left",n[n.right=M]="right",n))(C||{});class A{constructor(t,e,l,a=!1,i){p(this,"direction",C.left);p(this,"collisionDetector",new E);p(this,"startDate",new Date);p(this,"whenDied");p(this,"radius",10);p(this,"neuralNetwork");p(this,"rotation",0);p(this,"velocity",.24);p(this,"isDead",!1);this.x=t,this.y=e,this.levelTiles=l,this.isAnomaly=a,this.neuralNetwork=i||new B}getSensorLines(){const e=Math.PI/4;return[...new Array(D)].map((a,i)=>{const s=new m(this.x+1e3*Math.cos(i*e+this.rotation+Math.PI),this.y+1e3*Math.sin(i*e+this.rotation+Math.PI)),o=new m(this.x,this.y);return new H(o,s)})}getFitness(){return this.whenDied||(this.whenDied=new Date),this.whenDied.getTime()-this.startDate.getTime()}getSensorLengths(){const t=[];return this.getSensorLines().forEach(e=>{const l=new m(this.x,this.y);let a=new m(1/0,1/0);if(this.levelTiles.forEach(i=>{const s=this.collisionDetector.lineRect(e,{height:w,width:w,x:i.x*w,y:i.y*w});s&&s.distanceTo(l)<a.distanceTo(l)&&(a=s)}),isFinite(a.x))t.push(a.distanceTo(l));else throw new Error("Sensor line is not finite")}),t}tick(t){if(this.isDead){this.whenDied||(this.whenDied=new Date);return}const e=this.neuralNetwork.evaluate(this.getSensorLengths())<0;this.direction=e?C.left:C.right,this.rotation+=this.direction*t,this.x+=this.velocity*Math.cos(this.rotation-Math.PI/2)*t,this.y+=this.velocity*Math.sin(this.rotation-Math.PI/2)*t}}const I={};let S=!1;const J={getPressedKeys(){return{...I}},addKeyListeners(){S||(document.addEventListener("keydown",n=>{I[n.key.toLowerCase()]=!0}),document.addEventListener("keyup",n=>{I[n.key.toLowerCase()]=!1}),S=!0)}};function $(n,t){return n+Math.round(Math.random()*(t-n))}function Q(n,t){for(let e=n.length-1;e>=0;e--)if(t>n[e])return e;return 0}function U(n,t=(e,l)=>l-e){const e=Array(n).fill(0).map((s,o)=>t(o,n)),l=e.reduce((s,o)=>s+o,0),a=e.slice(0,-1).reduce((s,o)=>[...s,o+(s.slice(-1)[0]||0)],[0]),i=Array(n).fill(0);for(let s=0;s<n;s++){const o=$(1,l),r=Q(a,o);i[r]++}return i}function Z(n){return n.map(t=>Math.round(t*100)/100)}class tt{constructor(t){this.levelTiles=t}getNewGeneration(t){const e=[],l=[...t].sort((r,y)=>y.getFitness()-r.getFitness()),a=U(t.length,q),i=Array(t.length).fill(0).map((r,y)=>{const f=l[y];return Array(a[y]).fill(null).map(()=>{let x=f.neuralNetwork.clone();const u=Math.random()<X;if(u)x=new B;else for(let d=0;d<D;d++)x.weights[d]+=K>Math.random()?V*(Math.random()-.5):0;const h=new A(T.x*w,T.y*w,this.levelTiles,u,x);return e.push(x.weights),console.log("Boolean(child.neuralNetwork)",Boolean(h.neuralNetwork)),h})}).flat(),o=e.slice(1).reduce((r,y)=>Array(D).fill(0).map((f,x)=>r[x]+y[x]),e[0]).map(r=>r/t.length);return console.log("avg",Z(o)),i}}function et({bot:n,ctx:t}){t.fillStyle=n.isAnomaly?n.isDead?g.bots.anomaly.deadBot:g.bots.anomaly.aliveBot:n.isDead?g.bots.normal.deadBot:g.bots.normal.aliveBot,t.beginPath(),t.arc(n.x,n.y,n.radius,0,2*Math.PI,!1),t.fill()}function lt({ctx:n,boardWidth:t,boardHeight:e,tileSize:l}){n.strokeStyle=g.gridLine,n.lineWidth=1,s(),i();function i(){for(let o=l;o<e;o+=l)n.beginPath(),n.moveTo(.5,o+.5),n.lineTo(t+.5,o+.5),n.stroke(),n.closePath()}function s(){for(let o=l;o<t;o+=l)n.beginPath(),n.moveTo(o+.5,.5),n.lineTo(o+.5,e+.5),n.stroke(),n.closePath()}}var at=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},F={exports:{}};(function(n,t){(function(e,l){n.exports=l()})(at,function(){var e=function(){function l(h){return s.appendChild(h.dom),h}function a(h){for(var d=0;d<s.children.length;d++)s.children[d].style.display=d===h?"block":"none";i=h}var i=0,s=document.createElement("div");s.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",s.addEventListener("click",function(h){h.preventDefault(),a(++i%s.children.length)},!1);var o=(performance||Date).now(),r=o,y=0,f=l(new e.Panel("FPS","#0ff","#002")),x=l(new e.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var u=l(new e.Panel("MB","#f08","#201"));return a(0),{REVISION:16,dom:s,addPanel:l,showPanel:a,begin:function(){o=(performance||Date).now()},end:function(){y++;var h=(performance||Date).now();if(x.update(h-o,200),h>r+1e3&&(f.update(1e3*y/(h-r),100),r=h,y=0,u)){var d=performance.memory;u.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return h},update:function(){o=this.end()},domElement:s,setMode:a}};return e.Panel=function(l,a,i){var s=1/0,o=0,r=Math.round,y=r(window.devicePixelRatio||1),f=80*y,x=48*y,u=3*y,h=2*y,d=3*y,v=15*y,b=74*y,P=30*y,L=document.createElement("canvas");L.width=f,L.height=x,L.style.cssText="width:80px;height:48px";var c=L.getContext("2d");return c.font="bold "+9*y+"px Helvetica,Arial,sans-serif",c.textBaseline="top",c.fillStyle=i,c.fillRect(0,0,f,x),c.fillStyle=a,c.fillText(l,u,h),c.fillRect(d,v,b,P),c.fillStyle=i,c.globalAlpha=.9,c.fillRect(d,v,b,P),{dom:L,update:function(k,N){s=Math.min(s,k),o=Math.max(o,k),c.fillStyle=i,c.globalAlpha=1,c.fillRect(0,0,f,v),c.fillStyle=a,c.fillText(r(k)+" "+l+" ("+r(s)+"-"+r(o)+")",u,h),c.drawImage(L,d+y,v,b-y,P,d,v,b-y,P),c.fillRect(d+b-y,v,y,P),c.fillStyle=i,c.globalAlpha=.9,c.fillRect(d+b-y,v,y,r((1-k/N)*P))}}},e})})(F);const nt=F.exports;class it{constructor(){p(this,"levelData",Y);p(this,"populationHandler",new tt(this.levelData.tiles));p(this,"gameCanvas",document.getElementById("gameCanvas"));p(this,"ctx",this.gameCanvas.getContext("2d"));p(this,"collisionDetector",new E);p(this,"stats",new nt);p(this,"boardWidth",w*this.levelData.size);p(this,"boardHeight",w*this.levelData.size);p(this,"previousFrameTime",Date.now());p(this,"generationIndex",1);p(this,"bots",new Array(z).fill(null).map(()=>new A(T.x*w,T.y*w,this.levelData.tiles)));requestAnimationFrame(()=>this.onNextAnimationFrame()),this.stats.showPanel(0),document.body.appendChild(this.stats.dom),J.addKeyListeners()}drawCanvasBackground(){this.ctx.fillStyle=g.canvasBackground,this.ctx.fillRect(0,0,this.boardWidth,this.boardHeight)}checkForBotDeaths(){this.bots.forEach(t=>{this.isBotCollidingWithWalls(t)&&(t.isDead=!0)})}drawBots(){this.bots.forEach(t=>{this.drawBotSensors(t),et({bot:t,ctx:this.ctx})})}tickBots(t){this.bots.forEach(e=>e.tick(t))}checkForPopulationDeath(){this.bots.every(t=>t.isDead)&&(this.bots=this.populationHandler.getNewGeneration(this.bots),this.updateGenerationIndex())}drawPointOfCollision(t){this.ctx.fillStyle=g.pointOfCollision,this.ctx.beginPath(),this.ctx.arc(t.x,t.y,_,0,2*Math.PI,!1),this.ctx.fill()}onNextAnimationFrame(){const t=Date.now(),e=(t-this.previousFrameTime)*G;this.previousFrameTime=t,this.stats.begin(),this.drawCanvasBackground(),lt({boardHeight:this.boardHeight,boardWidth:this.boardWidth,ctx:this.ctx,tileSize:w}),this.drawWalls(),this.previousFrameTime=Date.now(),this.tickBots(e),this.drawBots(),this.checkForBotDeaths(),this.checkForPopulationDeath(),this.stats.end(),requestAnimationFrame(()=>this.onNextAnimationFrame())}getClosestIntersection({bot:t,line:e}){let l=new m(1/0,1/0);const a=new m(t.x,t.y);return this.levelData.tiles.forEach(i=>{const s=this.collisionDetector.lineRect(e,{height:w,width:w,x:i.x*w,y:i.y*w});s&&s.distanceTo(a)<l.distanceTo(a)&&(l=s)}),l}drawBotSensors(t){this.ctx.strokeStyle=g.sensorLine,t.getSensorLines().forEach(e=>{const l=this.getClosestIntersection({bot:t,line:e});if(isFinite(l.x))this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(l.x,l.y),this.ctx.stroke(),this.ctx.closePath(),this.drawPointOfCollision(l);else throw new Error("Sensor line is not finite")})}drawWalls(){this.levelData.tiles.forEach(t=>{this.ctx.fillStyle=g.wall,this.ctx.fillRect(t.x*w,t.y*w,w,w)})}isBotCollidingWithWalls(t){const e={radius:t.radius,x:t.x,y:t.y};return this.levelData.tiles.some(l=>{const a={height:w,width:w,x:l.x*w,y:l.y*w};return this.collisionDetector.rectCircle(a,e).isCollision})}updateGenerationIndex(){document.getElementById("generationIndex").innerHTML="Generation: "+ ++this.generationIndex}}new it;
