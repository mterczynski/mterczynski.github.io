<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://www.mter.pl/blog/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.mter.pl/blog/blog/" rel="alternate" type="text/html" /><updated>2024-10-21T00:19:21+02:00</updated><id>http://www.mter.pl/blog/blog/feed.xml</id><title type="html">mterczynski’s blog</title><subtitle>A blog about web programming</subtitle><entry><title type="html">How to Create a Simple Tic Tac Toe Game Using HTML, CSS, and JavaScript</title><link href="http://www.mter.pl/blog/blog/gamedev/javascript/html/css/tutorial/2024/09/08/building-tic-tac-toe-javascript.html" rel="alternate" type="text/html" title="How to Create a Simple Tic Tac Toe Game Using HTML, CSS, and JavaScript" /><published>2024-09-08T11:34:02+02:00</published><updated>2024-09-08T11:34:02+02:00</updated><id>http://www.mter.pl/blog/blog/gamedev/javascript/html/css/tutorial/2024/09/08/building-tic-tac-toe-javascript</id><content type="html" xml:base="http://www.mter.pl/blog/blog/gamedev/javascript/html/css/tutorial/2024/09/08/building-tic-tac-toe-javascript.html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#html-setup-emmet">HTML Setup, Emmet</a></li>
  <li><a href="#styling-the-board-with-css">Styling the board with CSS</a></li>
  <li><a href="#adding-interactivity">Adding interactivity</a></li>
  <li><a href="#handling-wins">Handling wins</a></li>
  <li><a href="#adding-a-reset-button">Adding a reset button</a></li>
  <li><a href="#links-to-playable-game-and-repository">Links to playable game and repository</a></li>
</ul>

<h3 id="introduction">Introduction</h3>

<p>Tic Tac Toe is an excellent project for beginners in game development. Its simplicity makes it approachable, yet it encompasses key fundamental concepts essential for developing more complex games.</p>

<h3 id="html-setup-emmet">HTML Setup, Emmet</h3>

<p>Let’s start with creating a basic HTML file.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- index.html --&gt;</span>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Tic tac toe<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>This is the default <a href="https://emmet.io/">Emmet</a> template, updated with the title of our game. Emmet is a useful HTML helper for creating complex code blocks quickly.
It’s available by default in VS Code and we will use it to generate the HTML for the 3x3 board.</p>

<p>To create the board using Emmet, we’ll type this in the <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code>:</p>

<p><code class="language-plaintext highlighter-rouge">div.board&gt;div.row*3&gt;div.tile*3</code></p>

<p>and press the Tab key. It will generate this HTML:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"board"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"tile"</span><span class="nt">&gt;&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"tile"</span><span class="nt">&gt;&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"tile"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"tile"</span><span class="nt">&gt;&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"tile"</span><span class="nt">&gt;&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"tile"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"tile"</span><span class="nt">&gt;&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"tile"</span><span class="nt">&gt;&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"tile"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<p>It’s a 3x3 board with 3 rows and 3 tiles in each row with proper CSS classes. Quite convenient, isn’t it?
For games with larger boards we would typically create the board programatically to save lines of code and make the code easier to check, but for 3x3 boards, defining each cell in HTML is totally fine.</p>

<p>If we open the HTML file in the browser, we won’t see anything. This is because we haven’t defined the grid lines and shape of the tiles. Let’s add some CSS in <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code>:</p>

<h3 id="styling-the-board-with-css">Styling the board with CSS</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nc">.tile</span> <span class="p">{</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
    <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<p><img width="110" height="398" src="/blog/assets/tic-tac-toe/board-column.png" /></p>

<p>We now have square tiles with black borders but all 9 of them are in one column. Let’s fix that with <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">flexbox</a>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nc">.row</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nc">.tile</span> <span class="p">{</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
    <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<p>By default, divs have <code class="language-plaintext highlighter-rouge">display</code> property set to <code class="language-plaintext highlighter-rouge">block</code>, which causes their children with <code class="language-plaintext highlighter-rouge">display: block</code> to be rendered one under another.
Flex layouts order their children horizontally by default (due to the fact that <code class="language-plaintext highlighter-rouge">justify-content</code> has a default value of <code class="language-plaintext highlighter-rouge">row</code>).</p>

<p><img width="300" src="/blog/assets/tic-tac-toe/Board.png" /></p>

<p>Something still seems odd. The borders inside the grid are thicker than the outside ones. This happens because both side and center cells have a 1px border on every side which together combine into 2px wide lines. Let’s make sure that there is maximum one line per column and row.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nc">.row</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nc">.tile</span> <span class="p">{</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
    <span class="nl">border-left</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
    <span class="nl">border-bottom</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<!-- <img width=300 src="/blog/assets/tic-tac-toe/board-border-right.png"/> -->
<p><img width="300" src="/blog/assets/tic-tac-toe/board-left-right.png" /></p>

<p>There are no duplicate lines now, but the top line and right lines are now gone. We can fix this by adding 2 borders on the board element.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.board</span> <span class="p">{</span>
  <span class="nl">border-top</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">border-right</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img width="400" src="/blog/assets/tic-tac-toe/board-3.png" /></p>

<p>We have all the borders but the top line and right lines aren’t positioned correctly. This happens because the board takes the maximum available width. We can fix this by limiting width of the board to its content width by adding <code class="language-plaintext highlighter-rouge">width: max-content</code> to board styles.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.board</span> <span class="p">{</span>
  <span class="nl">border-top</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">border-right</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="n">max-content</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img width="340" src="/blog/assets/tic-tac-toe/board-4.png" /></p>

<p>The board is now displayed correctly.</p>

<p><strong>Bonus task</strong></p>

<p>There is at least one different way of styling the borders that results in the same UI. Can you find it?</p>

<h3 id="adding-interactivity">Adding interactivity</h3>

<p>We want the game to be interactive with the player through mouse clicks. Let’s add a <code class="language-plaintext highlighter-rouge">script</code> tag inside <code class="language-plaintext highlighter-rouge">head</code> with click listeners attached to the tiles.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
  <span class="kd">const</span> <span class="nx">tiles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.tile</span><span class="dl">"</span><span class="p">);</span>

  <span class="nx">tiles</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">tile</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">tile</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">X</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>Nothing happens when the tiles are clicked…<br />
Let’s log them to see why.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
  <span class="kd">const</span> <span class="nx">tiles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.tile</span><span class="dl">"</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">tiles</span><span class="dl">"</span><span class="p">,</span> <span class="nx">tiles</span><span class="p">);</span>
  <span class="nx">tiles</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">tile</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">tile</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">X</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>If we open up the console we can see an empty NodeList:</p>

<p><img src="/blog/assets/tic-tac-toe/tiles.png" /></p>

<p>This happens because at the moment of executing our JavaScript code, the HTML code inside <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code> hasn’t executed yet.
We can solve the issue by moving the script tag at the end of the <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;script&gt;</span>
    <span class="kd">const</span> <span class="nx">tiles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.tile</span><span class="dl">"</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">tiles</span><span class="dl">"</span><span class="p">,</span> <span class="nx">tiles</span><span class="p">);</span>
    <span class="nx">tiles</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">tile</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">tile</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">X</span><span class="dl">"</span><span class="p">;</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<p>A small X appears in the tiles after clicking on them. We can also see that the <code class="language-plaintext highlighter-rouge">NodeList</code> contains 9 elements when we open the console.</p>

<p><img src="/blog/assets/tic-tac-toe/tiles-correct.png" /></p>

<p><strong>Alternative solution</strong></p>

<p>Instead of placing the <code class="language-plaintext highlighter-rouge">script</code> tag at the end of the <code class="language-plaintext highlighter-rouge">body</code>, we can use <code class="language-plaintext highlighter-rouge">DOMContentLoaded</code> event listener to wait for the DOM to fully load before executing the script.</p>

<h3 id="back-to-css">Back to CSS</h3>

<p>We’ve added a tiny bit of interactivity, but the “X” looks unreadable. Let’s fix that by updating the font styles.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.tile</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
  <span class="nl">border-left</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">border-bottom</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>

  <span class="nl">font-family</span><span class="p">:</span> <span class="s1">"Franklin Gothic Medium"</span><span class="p">,</span> <span class="s1">"Arial Narrow"</span><span class="p">,</span> <span class="n">Arial</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">line-height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
  <span class="py">user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The X symbols are now readable and centered. We’ve also added <code class="language-plaintext highlighter-rouge">user-select: none</code> which prevents users from selecting the text and <code class="language-plaintext highlighter-rouge">cursor: pointer</code> which adds a nice cursor that encourages users to click the tiles.</p>

<p><img width="320" src="/blog/assets/tic-tac-toe/board-x-cursor-pointer.png" /></p>

<h3 id="back-to-javascript">Back to JavaScript</h3>

<p>Now that we can add ‘X’ symbols, let’s make sure that we can add ‘O’ too to allow for a play between 2 players.
To do that we can create a <code class="language-plaintext highlighter-rouge">currentPlayer</code> variable with 2 available values: <code class="language-plaintext highlighter-rouge">'X'</code> and <code class="language-plaintext highlighter-rouge">'O'</code>, but it is not type safe (a mistake can be easily made - one might type <code class="language-plaintext highlighter-rouge">'x'</code> accidentally). We can improve the type safety by creating an object with all the possible values (or an enum if one is using TypeScript).</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
  <span class="c1">// Object.freeze is optional but it will ensure that the `players` object is read-only</span>
  <span class="kd">const</span> <span class="nx">players</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nf">freeze</span><span class="p">({</span>
    <span class="na">x</span><span class="p">:</span> <span class="dl">"</span><span class="s2">X</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">o</span><span class="p">:</span> <span class="dl">"</span><span class="s2">O</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">});</span>
  <span class="kd">let</span> <span class="nx">currentPlayer</span> <span class="o">=</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">tiles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.tile</span><span class="dl">"</span><span class="p">);</span>

  <span class="nx">tiles</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">tile</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">tile</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span> <span class="o">||</span> <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="nx">players</span><span class="p">.</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">currentPlayer</span><span class="p">;</span>
      <span class="nx">currentPlayer</span> <span class="o">=</span> <span class="nx">currentPlayer</span> <span class="o">===</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span> <span class="p">?</span> <span class="nx">players</span><span class="p">.</span><span class="nx">o</span> <span class="p">:</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>We’ve also added a check that will prevent the player from making a move on a filled tile.</p>

<p><strong>Alternative approach</strong></p>

<p>Instead of relying on string values, we can create a boolean variable named <code class="language-plaintext highlighter-rouge">currentPlayerX</code> with starting value <code class="language-plaintext highlighter-rouge">true</code> that changes to <code class="language-plaintext highlighter-rouge">false</code> after the first move is made. The code could look like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">currentPlayerX</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">tiles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.tile</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">tiles</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">tile</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">tile</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">X</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">O</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">currentPlayerX</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">X</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">O</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">currentPlayerX</span> <span class="o">=</span> <span class="o">!</span><span class="nx">currentPlayerX</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>One problem with this approach is that we’re still using <code class="language-plaintext highlighter-rouge">"X"</code> and <code class="language-plaintext highlighter-rouge">"O"</code> strings to check if tiles are busy. Another problem might come when we’ll be trying to define a variable for the final game result (2 player wins, 1 draw) - we may need to refer to <code class="language-plaintext highlighter-rouge">"X"</code> and <code class="language-plaintext highlighter-rouge">"O"</code> in our code.
If we decide to use the players object, we can avoid such problems in the future.</p>

<h3 id="handling-wins">Handling wins</h3>

<p>Now let’s solve the core problem of the game - determining wins.
To solve this, we’ll need to find a way to check for 3 identical symbols in one row, column or diagonal.
There are a few ways to tackle this - let’s explore some options.</p>

<p><strong>Method 1: Defining winning lines using indices</strong></p>

<p>If we assign an index to each tile, we can define the winning lines using these indices.</p>

<p><img width="315" src="/blog/assets/tic-tac-toe/board-indexed.png" /></p>

<p>The first row consists of tiles indexed by 0, 1, 2. The second row of tiles 3, 4 and 5. The last row is therefore [6, 7, 8] (<span style="color: blue;">blue lines</span>)<br />
 Columns consists of tiles: [0, 3, 6], [1, 4, 7], [2, 5, 8] (<span style="color: red;">red lines</span>)<br />
 Diagonals can be defined by tiles: [0, 4, 8], [2, 4, 6] (<span style="color: green;">green lines</span>)</p>

<p><img width="320" src="/blog/assets/tic-tac-toe/board-highlighted-lines.png" /></p>

<p>We can now use these indices in our code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">board</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.tile</span><span class="dl">"</span><span class="p">));</span>
<span class="kd">const</span> <span class="nx">rows</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
<span class="p">];</span>
<span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
<span class="p">];</span>
<span class="kd">const</span> <span class="nx">diagonals</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
<span class="p">];</span>
<span class="kd">const</span> <span class="nx">winningLines</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">rows</span><span class="p">,</span> <span class="p">...</span><span class="nx">columns</span><span class="p">,</span> <span class="p">...</span><span class="nx">diagonals</span><span class="p">].</span><span class="nf">map</span><span class="p">((</span><span class="nx">line</span><span class="p">)</span> <span class="o">=&gt;</span>
  <span class="nx">line</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">board</span><span class="p">[</span><span class="nx">index</span><span class="p">])</span>
<span class="p">);</span>
</code></pre></div></div>

<p>We’ve used the spread syntax to help ourselves with joining multiple arrays into a single one.</p>

<p>This approach doesn’t scale very well with board size, so another approach is to use for loops combined with two dimensional board representation.</p>

<p><strong>Method 2: Using for loops to iteratively create winning lines</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">board</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.row</span><span class="dl">"</span><span class="p">)).</span><span class="nf">map</span><span class="p">((</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span>
  <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span>
<span class="p">);</span>

<span class="kd">const</span> <span class="nx">boardSize</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">rows</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">rowIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">rowIndex</span> <span class="o">&lt;</span> <span class="nx">boardSize</span><span class="p">;</span> <span class="nx">rowIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">row</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">columnIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">columnIndex</span> <span class="o">&lt;</span> <span class="nx">boardSize</span><span class="p">;</span> <span class="nx">columnIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">row</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">board</span><span class="p">[</span><span class="nx">rowIndex</span><span class="p">][</span><span class="nx">columnIndex</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="nx">rows</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">columnIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">columnIndex</span> <span class="o">&lt;</span> <span class="nx">boardSize</span><span class="p">;</span> <span class="nx">columnIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">column</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">rowIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">rowIndex</span> <span class="o">&lt;</span> <span class="nx">boardSize</span><span class="p">;</span> <span class="nx">rowIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">column</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">board</span><span class="p">[</span><span class="nx">rowIndex</span><span class="p">][</span><span class="nx">columnIndex</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="nx">columns</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">column</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">leftDiagonal</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">const</span> <span class="nx">rightDiagonal</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">rowIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">rowIndex</span> <span class="o">&lt;</span> <span class="nx">boardSize</span><span class="p">;</span> <span class="nx">rowIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">leftDiagonal</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">board</span><span class="p">[</span><span class="nx">rowIndex</span><span class="p">][</span><span class="nx">rowIndex</span><span class="p">]);</span>
  <span class="nx">rightDiagonal</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">board</span><span class="p">[</span><span class="nx">boardSize</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="nx">rowIndex</span><span class="p">][</span><span class="nx">boardSize</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="nx">rowIndex</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">winningLines</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">rows</span><span class="p">,</span> <span class="p">...</span><span class="nx">columns</span><span class="p">,</span> <span class="nx">leftDiagonal</span><span class="p">,</span> <span class="nx">rightDiagonal</span><span class="p">];</span>
</code></pre></div></div>

<p>The above method is more complex but it scales nicely with the board size.
In our game, we’ll use the first approach for its simplicity. Let’s create a function called <code class="language-plaintext highlighter-rouge">checkGameOver</code>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">checkGameOver</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">board</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.tile</span><span class="dl">"</span><span class="p">));</span>
  <span class="kd">let</span> <span class="nx">winner</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">isGameOver</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">rows</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
  <span class="p">];</span>
  <span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
  <span class="p">];</span>
  <span class="kd">const</span> <span class="nx">diagonals</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
  <span class="p">];</span>
  <span class="kd">const</span> <span class="nx">winningLines</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">rows</span><span class="p">,</span> <span class="p">...</span><span class="nx">columns</span><span class="p">,</span> <span class="p">...</span><span class="nx">diagonals</span><span class="p">].</span><span class="nf">map</span><span class="p">((</span><span class="nx">line</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">line</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">board</span><span class="p">[</span><span class="nx">index</span><span class="p">])</span>
  <span class="p">);</span>

  <span class="kd">const</span> <span class="nx">stringifiedLines</span> <span class="o">=</span> <span class="nx">winningLines</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">line</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">line</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">tile</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">).</span><span class="nf">join</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span>
  <span class="p">);</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">line</span> <span class="k">of</span> <span class="nx">stringifiedLines</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">line</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">XXX</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">winner</span> <span class="o">=</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">line</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">OOO</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">winner</span> <span class="o">=</span> <span class="nx">players</span><span class="p">.</span><span class="nx">o</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">isGameDrawn</span> <span class="o">=</span> <span class="nx">winner</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nf">isBoardFull</span><span class="p">(</span><span class="nx">board</span><span class="p">);</span>
  <span class="nx">isGameOver</span> <span class="o">=</span> <span class="nx">winner</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">isGameDrawn</span><span class="p">;</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">isGameOver</span><span class="p">,</span> <span class="nx">winner</span><span class="p">,</span> <span class="nx">isGameDrawn</span> <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This should be all we need to check all the possible winning lines. We’ve also included a call to a nonexistent function <code class="language-plaintext highlighter-rouge">isBoardFull</code> that we’ll implement in the next step. The <code class="language-plaintext highlighter-rouge">isGameOver</code> and <code class="language-plaintext highlighter-rouge">winner</code> properties is all the information we need to determine whether the game was won and by who, or if it ended in a draw, but we’ve also included <code class="language-plaintext highlighter-rouge">isGameDrawn</code> property in the returned object for ease of use.</p>

<p>Let’s implement the <code class="language-plaintext highlighter-rouge">isBoardFull</code> function.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">isBoardFull</span><span class="p">(</span><span class="nx">board</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">board</span><span class="p">.</span><span class="nf">every</span><span class="p">((</span><span class="nx">tile</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">players</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">players</span><span class="p">.</span><span class="nx">o</span><span class="p">].</span><span class="nf">includes</span><span class="p">(</span><span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Our code with <code class="language-plaintext highlighter-rouge">includes</code> is a nice, shorter alternative to <code class="language-plaintext highlighter-rouge">tile.innerHTML === players.x || tile.innerHTML === players.o</code>.
We’ll now add 2 simple alerts to notify the players about the game outcome and test our code. We’ll also need to connect <code class="language-plaintext highlighter-rouge">checkGameOver</code> to the tile click listeners. Let’s update our existing code of tile click listeners:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">tile</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span> <span class="o">||</span> <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="nx">players</span><span class="p">.</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">currentPlayer</span><span class="p">;</span>
  <span class="nx">currentPlayer</span> <span class="o">=</span> <span class="nx">currentPlayer</span> <span class="o">===</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span> <span class="p">?</span> <span class="nx">players</span><span class="p">.</span><span class="nx">o</span> <span class="p">:</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>

  <span class="c1">// check game state after making a move:</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">isGameOver</span><span class="p">,</span> <span class="nx">winner</span><span class="p">,</span> <span class="nx">isGameDrawn</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">checkGameOver</span><span class="p">();</span>

  <span class="k">if </span><span class="p">(</span><span class="nx">winner</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">alert</span><span class="p">(</span><span class="s2">`Game won by </span><span class="p">${</span><span class="nx">winner</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">isGameDrawn</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">alert</span><span class="p">(</span><span class="s2">`Game drawn`</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Now both players can make a move, and are shown a simple alert after making the final move.
There is a bug to fix though - empty tiles are interactive even after finish the game. Let’s fix that by extending the first <a href="https://en.wikipedia.org/wiki/Guard_(computer_science)">guard statement</a>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">tile</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span>
    <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span> <span class="o">||</span>
    <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="nx">players</span><span class="p">.</span><span class="nx">o</span> <span class="o">||</span>
    <span class="nf">checkGameOver</span><span class="p">().</span><span class="nx">isGameOver</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// ...</span>
</code></pre></div></div>

<p>We’ve added one more check that checks a new <code class="language-plaintext highlighter-rouge">gameOver</code> boolean value. Notice that we’re now calling <code class="language-plaintext highlighter-rouge">checkGameOver</code> in <code class="language-plaintext highlighter-rouge">addEventListener</code>’s callback twice. This is due to the fact that <code class="language-plaintext highlighter-rouge">checkGameOver</code> will return different values before and after the move. Alternatively, we can solve this problem by calling <code class="language-plaintext highlighter-rouge">checkGameOver</code> only once after making a move and storing the result in a global variable.
The bug has been fixed, let’s now add a reset button below the board to allow the players to start a new game.</p>

<h3 id="adding-a-reset-button">Adding a reset button</h3>

<p>We’ll add a button below the board:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"resetButton"</span> <span class="na">class=</span><span class="s">"resetButton"</span><span class="nt">&gt;</span>Reset<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div>

<p>Style it:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.resetButton</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">24px</span><span class="p">;</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And attach a listener to it in our <script>:</script></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#resetButton</span><span class="dl">"</span><span class="p">).</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">currentPlayer</span> <span class="o">=</span> <span class="nx">players</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
  <span class="nx">tiles</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">tile</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">tile</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The button resets the <code class="language-plaintext highlighter-rouge">currentPlayer</code> variable and iterates over the tiles to clear every one of them.<br />
We now have a working button that resets the game to the initial state. This is the final functionality of the game that we have implemented in this tutorial. There are more things that can be implemented to the game, some ideas include:</p>

<ul>
  <li>using custom graphics for X and O</li>
  <li>adding support for mobile devices by making the design more responsive</li>
  <li>highlighting the winning lines after the game is won</li>
  <li>replacing browser’s alerts with custom messages</li>
  <li>allowing the players to choose a different board size</li>
  <li>adding a single player mode where one player plays versus a bot</li>
</ul>

<h3 id="links-to-playable-game-and-repository">Links to playable game and repository</h3>

<p>Final code of the game can be found <a href="https://github.com/mterczynski/tic-tac-toe">here</a>. Each step in the tutorial is represented by a single commit in the <a href="https://github.com/mterczynski/tic-tac-toe/commits/main/">repository</a>.
The game can be played <a href="https://www.mter.pl/tic-tac-toe">here</a>.</p>]]></content><author><name></name></author><category term="gamedev" /><category term="javascript" /><category term="html" /><category term="css" /><category term="tutorial" /><summary type="html"><![CDATA[Table of Contents]]></summary></entry><entry><title type="html">A short list of 7 awesome and free AI tools</title><link href="http://www.mter.pl/blog/blog/ai/2024/06/20/awesome-ai-tools.html" rel="alternate" type="text/html" title="A short list of 7 awesome and free AI tools" /><published>2024-06-20T23:34:02+02:00</published><updated>2024-06-20T23:34:02+02:00</updated><id>http://www.mter.pl/blog/blog/ai/2024/06/20/awesome-ai-tools</id><content type="html" xml:base="http://www.mter.pl/blog/blog/ai/2024/06/20/awesome-ai-tools.html"><![CDATA[<p>Many AI tools have emerged in the past 2 years. I’ve tried a few of them and made a short list of those I found the most useful.</p>

<ul>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/chatgpt.webp" /> <a href="https://chat.openai.com/chat">ChatGPT</a> is one of the most useful AI tools that is publicly available (and it’s free too!). It’s use cases range from generating answers to specific code problems, creating ideas for blog posts, getting quick (though not reliable) answers to legal issues, to writing jokes or generating alternative endings to your favorite stories. It has a huge amount of many different kinds of use cases, many yet undiscovered.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/submagic.jpg" /> <a href="https://www.submagic.co/">Submagic</a> is a helpful tool that can automatically add captions to videos using AI. The tool supports many different languages and can be used to quickly add subtitles to short videos for your business social media (like YouTube Shorts, TikTok). Submagic also provides other simple to use video enhancement features like adding background music, transitions, auto-cutting silent parts of the video.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/microsoft-designer.jpg" /> <a href="https://www.bing.com/images/create?FORM=GENEXP">Microsoft Designer</a> is a neat tool for generating images with 15 free daily generations. Each generation produces up to 4 different results. This tool has many different use cases - creating artwork, posters, advertisement ideas, Slack avatars, book covers, brand logos.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/luma.png" /> <a href="https://lumalabs.ai/genie/">Luma AI - Genie</a> is a free tool for generating 3D meshes with textures which can be quite useful for 3D game prototyping. Similarly to Microsoft Designer, Genie generates up to 4 versions for each prompt.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/soundraw.png" /> <a href="https://soundraw.io/">Soundraw</a> is an impressive tool for generating music which can be used for games, videos, and anything you want. You can choose the music’s theme, genre, mood. The generated soundtracks are also customizable - each instrument’s loudness is controllable and you can change the track’s BPM.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/v0.png" /> <a href="https://v0.dev/">V0</a> is a free tool by Vercel for generating websites from text prompts. The tool currently supports vanilla HTML and React as output formats. It can be especially useful for generating layout ideas if your head feels empty at the moment. Generated layouts can be continuously improved by adding more prompts like “change red color to orange”, “use mono font”.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/lets-enhance.webp" /> <a href="https://letsenhance.io/">Let’s Enhance</a> is a very useful tool for upscaling images. It can be used in conjunction with Microsoft Designer to generate high quality images from a text input. It can produce images in 4K and beyond which is very valuable for generating high quality desktop wallpapers or large printable pictures.</li>
</ul>]]></content><author><name></name></author><category term="ai" /><summary type="html"><![CDATA[Many AI tools have emerged in the past 2 years. I’ve tried a few of them and made a short list of those I found the most useful.]]></summary></entry><entry><title type="html">Builder design pattern in TypeScript</title><link href="http://www.mter.pl/blog/blog/design-patterns/typescript/2024/02/28/builder-design-pattern.html" rel="alternate" type="text/html" title="Builder design pattern in TypeScript" /><published>2024-02-28T22:34:02+01:00</published><updated>2024-02-28T22:34:02+01:00</updated><id>http://www.mter.pl/blog/blog/design-patterns/typescript/2024/02/28/builder-design-pattern</id><content type="html" xml:base="http://www.mter.pl/blog/blog/design-patterns/typescript/2024/02/28/builder-design-pattern.html"><![CDATA[<p>The builder pattern allows to easily create complex objects with different configurable properties.
I’d argue that there are better alternatives to create class instances in TypeScript. I’ll present a few different approaches to use classes in TypeScript and give my opinions on them.</p>

<p>Let’s start with a basic class:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1st example: basic class</span>
<span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="nf">constructor</span><span class="p">(</span>
    <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">price</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span> <span class="o">=</span> <span class="nx">productionYear</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getWeight</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getPrice</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getBrand</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getProductionYear</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getColor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span><span class="mi">2</span><span class="nx">_000</span><span class="p">,</span> <span class="mi">50</span><span class="nx">_000</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2013</span><span class="p">);</span>
</code></pre></div></div>

<p>This code is a bit lenghty given its simplicity. Let’s make it shorter using <a href="https://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties">parameter properties</a> syntax available in TypeScript.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 2nd example: class with parameter properties</span>
<span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="k">public</span> <span class="nf">getWeight</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getPrice</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getBrand</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getProductionYear</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getColor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span><span class="mi">2</span><span class="nx">_000</span><span class="p">,</span> <span class="mi">50</span><span class="nx">_000</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2013</span><span class="p">);</span>
</code></pre></div></div>

<p>The next problem that we have is that there are a lot of parameters in the constructor, which is hard to read. Let’s fix that.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 3rd example: class with all parameters packed into a single object</span>
<span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="nf">constructor</span><span class="p">({</span>
    <span class="nx">color</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">weight</span><span class="p">,</span>
    <span class="nx">price</span><span class="p">,</span>
    <span class="nx">brand</span><span class="p">,</span>
    <span class="nx">productionYear</span><span class="p">,</span>
  <span class="p">}:</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
    <span class="nl">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
    <span class="nl">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="p">})</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">price</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span> <span class="o">=</span> <span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getWeight</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getPrice</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getBrand</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getProductionYear</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getColor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">({</span>
  <span class="na">weight</span><span class="p">:</span> <span class="mi">2</span><span class="nx">_000</span><span class="p">,</span>
  <span class="na">price</span><span class="p">:</span> <span class="mi">50</span><span class="nx">_000</span><span class="p">,</span>
  <span class="na">brand</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">productionYear</span><span class="p">:</span> <span class="mi">2013</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The code has become lengthy again, but now the code for creating a new car is very readable. We can now also provide the parameters in any order we want which can be very handy.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// this also works:</span>
<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">({</span>
  <span class="na">brand</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">weight</span><span class="p">:</span> <span class="mi">2</span><span class="nx">_000</span><span class="p">,</span>
  <span class="na">productionYear</span><span class="p">:</span> <span class="mi">2013</span><span class="p">,</span>
  <span class="na">price</span><span class="p">:</span> <span class="mi">50</span><span class="nx">_000</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Let’s now introduce one variation of the builder pattern. The builder pattern typically uses 2 separate classes: a builder class
and a base class. The builder class is usually a class with methods for adjusting the properties of the built object and a method for building the object.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 4th approach: builder class + class with parameter properties</span>
<span class="kd">class</span> <span class="nc">CarBuilder</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">color</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">weight</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">price</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">brand</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">productionYear</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">setColor</span><span class="p">(</span><span class="nx">color</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">setWeight</span><span class="p">(</span><span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">setPrice</span><span class="p">(</span><span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">price</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">setBrand</span><span class="p">(</span><span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">setProductionYear</span><span class="p">(</span><span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span> <span class="o">=</span> <span class="nx">productionYear</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">build</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">The weight parameter is required</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">The price parameter is required</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">The brand parameter is required</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">The productionYear parameter is required</span><span class="dl">"</span><span class="p">);</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">color</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// the exact same class from 2nd example:</span>
<span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="k">public</span> <span class="nf">getWeight</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getPrice</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getBrand</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getProductionYear</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getColor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">carBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CarBuilder</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="nx">carBuilder</span>
  <span class="p">.</span><span class="nf">setWeight</span><span class="p">(</span><span class="mi">2</span><span class="nx">_000</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setBrand</span><span class="p">(</span><span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setPrice</span><span class="p">(</span><span class="mi">50</span><span class="nx">_000</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setProductionYear</span><span class="p">(</span><span class="mi">2013</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">build</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">car</span><span class="p">.</span><span class="nf">getColor</span><span class="p">());</span> <span class="c1">// red</span>
</code></pre></div></div>

<p>The builder pattern typically uses method chaining which you might know from algorithms operating on arrays or strings.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">clients</span>
  <span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">client</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">client</span><span class="p">.</span><span class="nx">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">prev</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nf">localeCompare</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">name</span><span class="p">))</span>
  <span class="p">.</span><span class="nf">find</span><span class="p">((</span><span class="nx">client</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">client</span><span class="p">.</span><span class="nx">country</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Poland</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">originalString</span>
  <span class="p">.</span><span class="nf">trim</span><span class="p">()</span> <span class="c1">// Remove leading and trailing whitespaces</span>
  <span class="p">.</span><span class="nf">toLowerCase</span><span class="p">()</span> <span class="c1">// Convert the string to lowercase</span>
  <span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">)</span> <span class="c1">// Remove commas</span>
  <span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// Get the first 5 characters of the string</span>
</code></pre></div></div>

<h4 id="method-chaining">Method chaining</h4>

<p>Both <code class="language-plaintext highlighter-rouge">Array.prototype.filter</code> and <code class="language-plaintext highlighter-rouge">Array.prototype.sort</code> return arrays, allowing for an indefinite chaining of array methods. Similarly, builder setters return an instance of a builder, allowing for an indefinite chaining of builder setters. Setter chaining is optional - the <code class="language-plaintext highlighter-rouge">return this</code> statement can be omitted and the builder can be accessed in such manner:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">carBuilder</span><span class="p">.</span><span class="nf">setWeight</span><span class="p">(</span><span class="mi">2</span><span class="nx">_000</span><span class="p">);</span>
<span class="nx">carBuilder</span><span class="p">.</span><span class="nf">setBrand</span><span class="p">(</span><span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">carBuilder</span><span class="p">.</span><span class="nf">setPrice</span><span class="p">(</span><span class="mi">50</span><span class="nx">_000</span><span class="p">);</span>
<span class="nx">carBuilder</span><span class="p">.</span><span class="nf">setProductionYear</span><span class="p">(</span><span class="mi">2013</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="nx">carBuilder</span><span class="p">.</span><span class="nf">build</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="conclusions">Conclusions</h2>

<p>The builder pattern might be useful in Java code, but it doesn’t seem to be that useful in TypeScript code - it requires creating an additional class, preferably with additional error checking (which works only in runtime and won’t show any errors during compilation time).
I recommend using approaches from 2nd or 3rd examples instead (which one you’d rather use will likely depend on number of constructor parameters).</p>

<h3 id="extra-notes">Extra notes</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">public</code> keyword is optional, I’ve added it to make the examples more understandable for developers with less TypeScript experience.</li>
  <li>getters can be created using <code class="language-plaintext highlighter-rouge">get</code> keyword (they are accessed a bit differently though).</li>
</ul>]]></content><author><name></name></author><category term="design-patterns" /><category term="typescript" /><summary type="html"><![CDATA[The builder pattern allows to easily create complex objects with different configurable properties. I’d argue that there are better alternatives to create class instances in TypeScript. I’ll present a few different approaches to use classes in TypeScript and give my opinions on them.]]></summary></entry></feed>