<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://www.mter.pl/blog/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.mter.pl/blog/blog/" rel="alternate" type="text/html" /><updated>2024-06-22T00:41:47+02:00</updated><id>http://www.mter.pl/blog/blog/feed.xml</id><title type="html">mterczynski’s blog</title><subtitle>A blog about web programming</subtitle><entry><title type="html">A short list of 7 awesome and free AI tools</title><link href="http://www.mter.pl/blog/blog/ai/2024/06/20/awesome-ai-tools.html" rel="alternate" type="text/html" title="A short list of 7 awesome and free AI tools" /><published>2024-06-20T23:34:02+02:00</published><updated>2024-06-20T23:34:02+02:00</updated><id>http://www.mter.pl/blog/blog/ai/2024/06/20/awesome-ai-tools</id><content type="html" xml:base="http://www.mter.pl/blog/blog/ai/2024/06/20/awesome-ai-tools.html"><![CDATA[<p>Many AI tools have emerged in the past 2 years. I’ve tried a few of them and made a short list of those I found the most useful.</p>

<ul>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/chatgpt.webp" /> <a href="https://chat.openai.com/chat">ChatGPT</a> is one of the most useful AI tool that is publicly available (and it’s free too!). It’s use cases range from generating answers to specific code problems, creating ideas for blog posts, getting quick (though not reliable) answers to legal issues, to writing jokes or generating alternative endings to your favorite stories. It has a huge amount of many different kinds of use cases, many yet undiscovered.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/submagic.jpg" /> <a href="https://www.submagic.co/">Submagic</a> is a helpful tool that can automatically add captions to videos using AI. The tool supports many different languages and can be used to quickly add subtitles to short videos for your business social media (like YouTube Shorts, TikTok). Submagic also provides other simple to use video enhancement features like adding background music, transitions, auto-cutting silent parts of the video.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/microsoft-designer.jpg" /> <a href="https://www.bing.com/images/create?FORM=GENEXP">Microsoft Designer</a> is a neat tool for generating images with 15 free daily generations. Each generation produces up to 4 different results. This tool has many different use cases - creating artwork, posters, advertisement ideas, Slack avatars, book covers, brand logos.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/luma.png" /> <a href="https://lumalabs.ai/genie/">Luma AI - Genie</a> is a free tool for generating 3D meshes with textures which can be quite useful for 3D game prototyping. Similarly to Microsoft Designer, Genie generates up to 4 versions for each prompt.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/soundraw.png" /> <a href="https://soundraw.io/">Soundraw</a> is an impressive tool for generating music which can be used for games, videos, and anything you want. You can choose the music’s theme, genre, mood. The generated soundtracks are also customizable - each instrument’s loudness is controllable and you can change the track’s BPM.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/v0.png" /> <a href="https://v0.dev/">V0</a> is a free tool by Vercel for generating websites from text prompts. The tool currently supports vanilla HTML and React as output formats. It can be especially useful to generate layout ideas if your head feels empty at the moment. The generated outputs can be continuously improved by adding more prompts like “change red color to orange”, “use mono font”.</li>
  <li><img width="30" height="30" src="/blog/assets/ai-tools/lets-enhance.webp" /> <a href="https://letsenhance.io/">Let’s Enhance</a> is a very useful tool for upscaling images. It can be used in conjunction with Microsoft Designer to generate high quality images from a text input. It can produce images in 4K and beyond which is very valuable for generating desktop wallpapers or large printable pictures.</li>
</ul>]]></content><author><name></name></author><category term="ai" /><summary type="html"><![CDATA[Many AI tools have emerged in the past 2 years. I’ve tried a few of them and made a short list of those I found the most useful.]]></summary></entry><entry><title type="html">Builder design pattern in TypeScript</title><link href="http://www.mter.pl/blog/blog/design-patterns,/typescript/2024/02/28/builder-design-pattern.html" rel="alternate" type="text/html" title="Builder design pattern in TypeScript" /><published>2024-02-28T22:34:02+01:00</published><updated>2024-02-28T22:34:02+01:00</updated><id>http://www.mter.pl/blog/blog/design-patterns,/typescript/2024/02/28/builder-design-pattern</id><content type="html" xml:base="http://www.mter.pl/blog/blog/design-patterns,/typescript/2024/02/28/builder-design-pattern.html"><![CDATA[<p>The builder pattern allows to easily create complex objects with different configurable properties.
I’d argue that there are better alternatives to create class instances in TypeScript. I’ll present a few different approaches to use classes in TypeScript and give my opinions on them.</p>

<p>Let’s start with a basic class:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1st example: basic class</span>
<span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="nf">constructor</span><span class="p">(</span>
    <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">price</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span> <span class="o">=</span> <span class="nx">productionYear</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getWeight</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getPrice</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getBrand</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getProductionYear</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getColor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span><span class="mi">2</span><span class="nx">_000</span><span class="p">,</span> <span class="mi">50</span><span class="nx">_000</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2013</span><span class="p">);</span>
</code></pre></div></div>

<p>This code is a bit lenghty given its simplicity. Let’s make it shorter using <a href="https://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties">parameter properties</a> syntax available in TypeScript.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 2nd example: class with parameter properties</span>
<span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="k">public</span> <span class="nf">getWeight</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getPrice</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getBrand</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getProductionYear</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getColor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span><span class="mi">2</span><span class="nx">_000</span><span class="p">,</span> <span class="mi">50</span><span class="nx">_000</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2013</span><span class="p">);</span>
</code></pre></div></div>

<p>The next problem that we have is that there are a lot of parameters in the constructor, which is hard to read. Let’s fix that.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 3rd example: class with all parameters packed into a single object</span>
<span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="nf">constructor</span><span class="p">({</span>
    <span class="nx">color</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">weight</span><span class="p">,</span>
    <span class="nx">price</span><span class="p">,</span>
    <span class="nx">brand</span><span class="p">,</span>
    <span class="nx">productionYear</span><span class="p">,</span>
  <span class="p">}:</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
    <span class="nl">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
    <span class="nl">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="p">})</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">price</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span> <span class="o">=</span> <span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getWeight</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getPrice</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getBrand</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getProductionYear</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getColor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">({</span>
  <span class="na">weight</span><span class="p">:</span> <span class="mi">2</span><span class="nx">_000</span><span class="p">,</span>
  <span class="na">price</span><span class="p">:</span> <span class="mi">50</span><span class="nx">_000</span><span class="p">,</span>
  <span class="na">brand</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">productionYear</span><span class="p">:</span> <span class="mi">2013</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The code has become lengthy again, but now the code for creating a new car is very readable. We can now also provide the parameters in any order we want which can be very handy.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// this also works:</span>
<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">({</span>
  <span class="na">brand</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">weight</span><span class="p">:</span> <span class="mi">2</span><span class="nx">_000</span><span class="p">,</span>
  <span class="na">productionYear</span><span class="p">:</span> <span class="mi">2013</span><span class="p">,</span>
  <span class="na">price</span><span class="p">:</span> <span class="mi">50</span><span class="nx">_000</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Let’s now introduce one variation of the builder pattern. The builder pattern typically uses 2 separate classes: a builder class
and a base class. The builder class is usually a class with methods for adjusting the properties of the built object and a method for building the object.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 4th approach: builder class + class with parameter properties</span>
<span class="kd">class</span> <span class="nc">CarBuilder</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">color</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">weight</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">price</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">brand</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">private</span> <span class="nx">productionYear</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">setColor</span><span class="p">(</span><span class="nx">color</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">setWeight</span><span class="p">(</span><span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">setPrice</span><span class="p">(</span><span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">price</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">setBrand</span><span class="p">(</span><span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">setProductionYear</span><span class="p">(</span><span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span> <span class="o">=</span> <span class="nx">productionYear</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">build</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">The weight parameter is required</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">The price parameter is required</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">The brand parameter is required</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">The productionYear parameter is required</span><span class="dl">"</span><span class="p">);</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">color</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// the exact same class from 2nd example:</span>
<span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">price</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">brand</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">productionYear</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="k">public</span> <span class="nf">getWeight</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getPrice</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getBrand</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getProductionYear</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">productionYear</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getColor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">carBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CarBuilder</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="nx">carBuilder</span>
  <span class="p">.</span><span class="nf">setWeight</span><span class="p">(</span><span class="mi">2</span><span class="nx">_000</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setBrand</span><span class="p">(</span><span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setPrice</span><span class="p">(</span><span class="mi">50</span><span class="nx">_000</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">setProductionYear</span><span class="p">(</span><span class="mi">2013</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">build</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">car</span><span class="p">.</span><span class="nf">getColor</span><span class="p">());</span> <span class="c1">// red</span>
</code></pre></div></div>

<p>The builder pattern typically uses method chaining which you might know from algorithms operating on arrays or strings.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">clients</span>
  <span class="p">.</span><span class="nf">filter</span><span class="p">((</span><span class="nx">client</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">client</span><span class="p">.</span><span class="nx">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">prev</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nf">localeCompare</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">name</span><span class="p">))</span>
  <span class="p">.</span><span class="nf">find</span><span class="p">((</span><span class="nx">client</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">client</span><span class="p">.</span><span class="nx">country</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Poland</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">originalString</span>
  <span class="p">.</span><span class="nf">trim</span><span class="p">()</span> <span class="c1">// Remove leading and trailing whitespaces</span>
  <span class="p">.</span><span class="nf">toLowerCase</span><span class="p">()</span> <span class="c1">// Convert the string to lowercase</span>
  <span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">)</span> <span class="c1">// Remove commas</span>
  <span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// Get the first 5 characters of the string</span>
</code></pre></div></div>

<h4 id="method-chaining">Method chaining</h4>

<p>Both <code class="language-plaintext highlighter-rouge">Array.prototype.filter</code> and <code class="language-plaintext highlighter-rouge">Array.prototype.sort</code> return arrays, allowing for an indefinite chaining of array methods. Similarly, builder setters return an instance of a builder, allowing for an indefinite chaining of builder setters. Setter chaining is optional - the <code class="language-plaintext highlighter-rouge">return this</code> statement can be omitted and the builder can be accessed in such manner:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">carBuilder</span><span class="p">.</span><span class="nf">setWeight</span><span class="p">(</span><span class="mi">2</span><span class="nx">_000</span><span class="p">);</span>
<span class="nx">carBuilder</span><span class="p">.</span><span class="nf">setBrand</span><span class="p">(</span><span class="dl">"</span><span class="s2">Ford</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">carBuilder</span><span class="p">.</span><span class="nf">setPrice</span><span class="p">(</span><span class="mi">50</span><span class="nx">_000</span><span class="p">);</span>
<span class="nx">carBuilder</span><span class="p">.</span><span class="nf">setProductionYear</span><span class="p">(</span><span class="mi">2013</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="nx">carBuilder</span><span class="p">.</span><span class="nf">build</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="conclusions">Conclusions</h2>

<p>The builder pattern might be useful in Java code, but it doesn’t seem to be that useful in TypeScript code - it requires creating an additional class, preferably with additional error checking (which works only in runtime and won’t show any errors during compilation time).
I recommend using approaches from 2nd or 3rd examples instead (which one you’d rather use will likely depend on number of constructor parameters).</p>

<h3 id="extra-notes">Extra notes</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">public</code> keyword is optional, I’ve added it to make the examples more understandable for developers with less TypeScript experience.</li>
  <li>getters can be created using <code class="language-plaintext highlighter-rouge">get</code> keyword (they are accessed a bit differently though).</li>
</ul>]]></content><author><name></name></author><category term="design-patterns," /><category term="typescript" /><summary type="html"><![CDATA[The builder pattern allows to easily create complex objects with different configurable properties. I’d argue that there are better alternatives to create class instances in TypeScript. I’ll present a few different approaches to use classes in TypeScript and give my opinions on them.]]></summary></entry></feed>